"""
    运算符的分类
        * 算术运算符
            +：加法    -：减法
            *：乘法    /：除法(有小数）
            //：整除   %：取余
            **：指数   ()：用来提高运算优先级
            混合运算顺序：()高于**高于* / // %高于+ -
            运算结果自动向上转型到操作数包含的最高类型，除法例外：除法结果必须是浮点型
            Python中没有自增(++i)和自减(--i)运算符

        * 赋值运算符
            =：赋值，将=右侧的结果赋值给等号左边的变量
                单个变量赋值
                多个变量赋相同的值
                多个变量赋不同的值

        * 复合赋值运算符
            +=：c+=a等价于c=c+a
            -=：c-=a等价于c=c-a
            *=：c*=a等价于c=c*a
            /=：c/=a等价于c=c/a
            //=：c//=a等价于c=c//a
            %=：c%=a等价于c=c%a
            **=：c**=a等价于c=c**a

        * 比较运算符
            比较运算符也叫关系运算符，通常用来作判断
            == != < > >= <=

        * 逻辑运算符
            表达式逻辑判断
                and：逻辑与，有假为假
                or：逻辑或，有真为真
                not：逻辑非，真假相反
            数字逻辑判断
                and：只要有一个值为0，则结果为0，否则结果为最后一个非零数字
                or：只有所有值为0时结果才为0，否则结果为第一个非零数字
                not：大于0的返回False，小于等于0的返回True

        *位运算符
        &：按位与，有0则0  1101 & 0101 = 0101
        |：按位或，有1则1  1101 | 0101 = 1101
        ^：按位异或，相同为0，不同为1    1101 ^ 0101 = 1000
        ~：按位取反，若1取0，若0取1    ~1101 = 0010
        <<：按位左移，左移几位相当于乘以2的几次方
        >>：按位右移，右移几位相当于除以2的几次方

"""
# 1.算法运算符
print(1 + 2)  # int 3
print(1 + 2.0)  # float
print(4 / 2)  # float 2.0
print(5 / 2)  # 2.5
print(5 // 2)  # 2
print(2 * 3 ** 2)  # 18
print((2 * 3) ** 2)  # 36

# 2.赋值运算符
var1 = 1.2  # 单个变量赋值
var2, var3 = 110, 'anpeng'  # 多个变量赋不同的值
var4 = var5 = 'hello'  # 多个变量赋相同的值
print(var1, var2, var3)
print(var4, var5)

# 3.复合赋值运算符
a = b = 10
a += 1  # a=a+1
print(a)  # 11
# print(a+=1) # 复合赋值表达式不可直接打印
b *= 1 + 2  # 复合赋值运算符后面的表达式先算
print(b)  # 30

# 4.关系运算符
print(4 > 2)  # True
print(2 == 1)  # False

# 5.逻辑运算符
# 表达式逻辑运算
print(0 < 1 and 2 > 4)  # False 有假为假
print(0 < 1 or 2 > 0.5)  # True 有真为真
print(not (4 > 2))  # False 真假相反
# 数字逻辑运算
print(1 and 2)
print(0 and 1)
print(0 or 1)
print(not 0)

# 6.位运算符
print(bin(0b1101 & 0b0101))
print(bin(0b1101 | 0b0101))
print(bin(0b1101 ^ 0b0101))
print(bin(~ 0b1101))  # 0b1101在内存中还是32位整型，按位取反，由00000000 00000000 00000000 00001101变为11111111 11111111 11111111 11110010
# 此为补码表示,最高为1，此时为负数，故真值为各位取反，再加一，即-0b1110。
print(bin(0b1101 << 2))
print(bin(0b1101 >> 2))
