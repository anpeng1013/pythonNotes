"""
    函数：
        作用：封装一段具有独立功能的代码块集合，对外提供调用函数名。在需要的位置调用这个函数名即可完成对应的需求，函数在开发过程程，可以高效实现现代码复用。

        步骤：
            1.定义函数
                def 函数名(参数):
                    函数体代码
                    .......
            2.使用函数
                函数名(参数)-参数可有可无
                必须先定义后使用。
            注意：定义不同函数是，标准格式是--间隔两行。

        参数：参数可有可无。
                参数传递内容：传递的都是地址，即形参地址和实参地址相同。
                            对于不可变对象：数字，字符串和元组等，当在函数体对形参进行赋值、更新、删除等修改操作时，解释器会重新开辟内存空间保存修改结果，并将新的地址赋值给形参。
                                        这相当于是“传值”
                            对于可变对象：列表，集合以及字典等，只要函数体不对形参进行重新赋新地址值的操作，函数内就可以对形参地址(同实参地址）指向的内容进行修改
                                        这相当于是“传地址”
                            注意:其实Python参数传递的都是引用，即“地址”。

                参数传递方式：位置传递--对应位置传递实参
                            形参名传递--根据形参名传递参，跟位置无关。
                            参数默认值--在定义函数时，使用形参名=value的方式默认赋值，如果参数没有被传递值，则使用该默认值。
                            缺省传递--可传递多个参数，形参名前需要加 *，对多个实参用元组进行包裹，如果缺省参数是字典，则用两个星号**包裹。
                            解缺省传递--在实参名加*或者**,让实参序列的每一个元素对应一个位置参数

        返回值
        说明文档
        函数嵌套
"""


# 1.函数定义
def function():
    print('anpeng love huli')


function()

# 2.函数的参数
# 2.1.1 参数传递内容之”传值“：数字、字符串、元组等不可变对象。
print('-' * 60)


def add(arg1, arg2):
    print('赋值前地址是：' + str(id(arg1)))
    arg1 = arg1 + arg2
    print('函数内形参arg1的地址是：' + str(id(arg1)), '内容是：' + str(arg1))


num1, num2 = map(int, input("请输入两个数字：").split())
print('传参前地址是：' + str(id(num1)))
add(num1, num2)  # 实参为数字，不可变对象，为值传递
print('函数外实参num1的地址是：' + str(id(num1)), '内容是：' + str(num1))

str1, str2 = 'anpeng', ' love huli'
print('传参前地址是：' + str(id(str1)))
add(str1, str2)  # 实参为字符串，不可变对象，为值传递。
print('函数外实参str1的地址是：' + str(id(str1)), '内容是：' + str1)

tuple1, tuple2 = (1, 2, 3), (3, 2, 1)
print('传参前地址是：' + str(id(tuple1)))
add(tuple1, tuple2)  # 实参为元组，不可变对象，为值传递。
print('函数外实参tuple1的地址是：' + str(id(tuple1)), '内容是：' + str(tuple1))

# 2.1.2 参数传递内容之”传地址“：列表、集合、字典等可变对象。
print('-' * 60)


def update_list(arg1):
    arg1[0] = 'anpeng'
    print('传参后形参地址：' + str(id(arg1)))
    print('函数内形参arg1[0]的地址是：' + str(id(arg1[0])), '内容是：' + str(arg1[0]))


list1 = ['a', 'b']
list2 = ['huli']
print('传参前实参地址是：' + str(id(list1)))
update_list(list1)
print('函数外实参list1[0]的地址是：' + str(id(list1[0])), '内容是：' + str(list1[0]))

add(list1, list2)  # 公共运算
print(f'公共运算符+号作用容器，会生成一个新容器，新容器的地址赋值给形参arg1，实参list1的地址不会变：{id(list1)}')

# 2.2.1 参数传递方式之位置参数
